{"remainingRequest":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/src/views/Home.vue","mtime":1597344323983},{"path":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/balthazarely/Desktop/Development/Practice/quasar-vue0projects/vue-movie-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}